using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Simple.Objects;

#nullable enable

namespace DemoApp.Objects
{
    #region |   Code Generated by Simple.Objects Code Generator   |

    partial class UserGroupObjectPolicy
    {
        #region |   Protected Members   |

        protected long userGroupId, oldUserGroupId;
        protected int objectTableId, oldObjectTableId;
        protected long objectId, oldObjectId;
        protected UserPolicyRights policyRights, oldPolicyRights;

        #endregion |   Protected Members   |

        #region |   Private Static Members   |

        private static Func<UserGroupObjectPolicy, object?>[] GetFieldValueMethods;
        private static Func<UserGroupObjectPolicy, object?>[] GetOldFieldValueMethods;
        private static Action<UserGroupObjectPolicy, object>[] SetFieldValueMethods;
        private static Action<UserGroupObjectPolicy, object>[] SetOldFieldValueMethods;

        #endregion |   Private Static Members   |

        #region |   Static Methods Initialization   |

        static UserGroupObjectPolicy()
        {
            int maxIndex = UserGroupObjectPolicyModel.PropertyModel.GetCollection().GetMaxIndex();

            GetFieldValueMethods = new Func<UserGroupObjectPolicy, object?>[maxIndex + 1];
            GetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.Id.PropertyIndex]            = (item) => item.id;
            GetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.PreviousId.PropertyIndex]    = (item) => item.previousId;
            GetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.UserGroupId.PropertyIndex]   = (item) => item.userGroupId;
            GetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.ObjectTableId.PropertyIndex] = (item) => item.objectTableId;
            GetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.ObjectId.PropertyIndex]      = (item) => item.objectId;
            GetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.PolicyRights.PropertyIndex]  = (item) => item.policyRights;
            GetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.OrderIndex.PropertyIndex]    = (item) => item.orderIndex;

            GetOldFieldValueMethods = new Func<UserGroupObjectPolicy, object?>[maxIndex + 1];
            GetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.Id.PropertyIndex]            = (item) => item.oldId;
            GetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.PreviousId.PropertyIndex]    = (item) => item.oldPreviousId;
            GetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.UserGroupId.PropertyIndex]   = (item) => item.oldUserGroupId;
            GetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.ObjectTableId.PropertyIndex] = (item) => item.oldObjectTableId;
            GetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.ObjectId.PropertyIndex]      = (item) => item.oldObjectId;
            GetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.PolicyRights.PropertyIndex]  = (item) => item.oldPolicyRights;
            GetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.OrderIndex.PropertyIndex]    = (item) => item.oldOrderIndex;

            SetFieldValueMethods = new Action<UserGroupObjectPolicy, object>[maxIndex + 1];
            SetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.Id.PropertyIndex]            = (item, value) => item.id = (long)value;
            SetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.PreviousId.PropertyIndex]    = (item, value) => item.previousId = (long)value;
            SetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.UserGroupId.PropertyIndex]   = (item, value) => item.userGroupId = (long)value;
            SetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.ObjectTableId.PropertyIndex] = (item, value) => item.objectTableId = (int)value;
            SetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.ObjectId.PropertyIndex]      = (item, value) => item.objectId = (long)value;
            SetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.PolicyRights.PropertyIndex]  = (item, value) => item.policyRights = (UserPolicyRights)value;
            SetFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.OrderIndex.PropertyIndex]    = (item, value) => item.orderIndex = (int)value;

            SetOldFieldValueMethods = new Action<UserGroupObjectPolicy, object>[maxIndex + 1];
            SetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.Id.PropertyIndex]            = (item, value) => item.oldId = (long)value;
            SetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.PreviousId.PropertyIndex]    = (item, value) => item.oldPreviousId = (long)value;
            SetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.UserGroupId.PropertyIndex]   = (item, value) => item.oldUserGroupId = (long)value;
            SetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.ObjectTableId.PropertyIndex] = (item, value) => item.oldObjectTableId = (int)value;
            SetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.ObjectId.PropertyIndex]      = (item, value) => item.oldObjectId = (long)value;
            SetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.PolicyRights.PropertyIndex]  = (item, value) => item.oldPolicyRights = (UserPolicyRights)value;
            SetOldFieldValueMethods[UserGroupObjectPolicyModel.PropertyModel.OrderIndex.PropertyIndex]    = (item, value) => item.oldOrderIndex = (int)value;
        }

        #endregion |   Static Methods Initialization   |

        #region |   Properties by Object Property Model   |

        /// <summary>
        /// Gets or sets UserGroupId
        /// </summary>
        public long UserGroupId
        {
            get { return this.userGroupId; }
            set { this.SetPropertyValue(UserGroupObjectPolicyModel.PropertyModel.UserGroupId, value); }
		}

        /// <summary>
        /// Gets or sets ObjectTableId
        /// </summary>
        public int ObjectTableId
        {
            get { return this.objectTableId; }
            set { this.SetPropertyValue(UserGroupObjectPolicyModel.PropertyModel.ObjectTableId, value); }
		}

        /// <summary>
        /// Gets or sets ObjectId
        /// </summary>
        public long ObjectId
        {
            get { return this.objectId; }
            set { this.SetPropertyValue(UserGroupObjectPolicyModel.PropertyModel.ObjectId, value); }
		}

        /// <summary>
        /// Gets or sets PolicyRights
        /// </summary>
        public UserPolicyRights PolicyRights
        {
            get { return this.policyRights; }
            set { this.SetPropertyValue(UserGroupObjectPolicyModel.PropertyModel.PolicyRights, value); }
		}

        #endregion |   Properties by Object Property Model   |

        #region |   One-To-Many Relation Properties   |

        /// <summary>
        /// Gets or sets one-to-many relation primary UserGroup object.
        /// </summary>
        public UserGroup UserGroup
        {
            get { return this.GetOneToManyPrimaryObject<UserGroup>(RelationPolicyModel.OneToManyUserGroupObjectPolicyToUserGroup)!; }
            set { this.SetOneToManyPrimaryObject(value, RelationPolicyModel.OneToManyUserGroupObjectPolicyToUserGroup); }
        }

        /// <summary>
        /// Gets one-to-many relation foreign GraphElements collection.
        /// </summary>
        public override SimpleObjectCollection<GraphElement> GraphElements
        {
            get { return this.GetOneToManyForeignObjectCollection<GraphElement>(RelationPolicyModelBase.OneToManyGraphElementToSimpleObject); }
        }

        #endregion |   One-To-Many Relation Properties   |

        #region |   Public Overriden Methods   |

        /// <summary>
        /// Gets the UserGroupObjectPolicyModel definition instance.
        /// </summary>
        public override ISimpleObjectModel GetModel()
        {
            return UserGroupObjectPolicyModel.Instance; 
        }

        /// <summary>
        /// Gets the one-to-many collection based on relation key. If no one-to-many relation specified in relation model for this object, the base class method is called.
        /// </summary>
        /// <param name="relationKey">The one-to-many relation key</param>
        /// <returns>The <see cref="SimpleObjectCollection?"/> result.</returns>
        public override SimpleObjectCollection? GetOneToManyForeignObjectCollection(int relationKey)
        {
            if (relationKey == RelationPolicyModelBase.OneToManyGraphElementToSimpleObject.RelationKey)
                return this.GraphElements;

            return base.GetOneToManyForeignObjectCollection(relationKey);
        }

        #endregion |   Public Overriden Methods   |

        #region |   Protected Abstract Overriden Methods  |

        /// <summary>
        /// Gets field property value by property index.
        /// </summary>
        protected override object? GetFieldValue(int propertyIndex)
        {
            return GetFieldValueMethods[propertyIndex](this);
        }

        /// <summary>
        /// Gets field old property value by property index.
        /// </summary>
        protected override object? GetOldFieldValue(int propertyIndex)
        {
            return GetOldFieldValueMethods[propertyIndex](this);
        }

        /// <summary>
        /// Sets field property value by property index.
        /// </summary>
        protected override void SetFieldValue(int propertyIndex, object value)
        {
            SetFieldValueMethods[propertyIndex](this, value);
        }

        /// <summary>
        /// Sets field old property value by property index.
        /// </summary>
        protected override void SetOldFieldValue(int propertyIndex, object value)
        {
            SetOldFieldValueMethods[propertyIndex](this, value);
        }

        #endregion |   Protected Abstract Overriden Methods  |
    }

    #endregion |   Code Generated by Simple.Objects Code Generator   |
}
